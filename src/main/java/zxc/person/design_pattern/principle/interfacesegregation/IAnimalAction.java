package zxc.person.design_pattern.principle.interfacesegregation;

/**
 * 接口隔离原则
 * 定义：用多个专门的接口，而不使用单一的总接口，
 * 客户端不应该依赖他不需要的接口
 *
 * 一个类对一个类的依赖应该建立在最小的接口上
 *
 * 建立单一的接口，不要建立庞大臃肿的接口，
 * 尽量细化接口，接口中的方法尽量少
 *
 * 注意适度原则，防止程序设计的复杂性
 *
 * 优点：符合我们常说的高内聚低耦合的设计思想
 * 从而使得类具有很好的可读性、可扩展性和可维护性
 *
 * 与单一职责区别：
 * 着重点不同，单一职责重点在职责接口隔离在于接口，功能隔离
 *
 * 一定要适度，否则接口过多，影响程序设计的复杂性
 *
 */
public interface IAnimalAction {
    void eat();

    //狗不会飞
    void fly();

    //有的鸟会游泳
    void swim();
}
